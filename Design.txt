A simple txt file to keep track of my progress and how I designed this application

First step, had to figure out how to read files, used the fs module for this.
How to read command line args : process.argv (array)

Had to configure my package.json to use esrun module and start my application, the usual method using node did not work as I cannot run node scripts on work laptop lol 

In order to pass command line arguments, need to use -- so, a simple input on command line might look like:

npm run start -- [-option] [file]
npm run start -- -l test.txt

app.ts is the starting point of the application, send the operation and filepath as parameter to the WC funtion in index.ts file.

Saw some solution using async/ await for the starter function. Don't think I need to use that since the app has only one functionality (all operations on the file)
Oops, I HAVE to use async/await as I am using async functions to read the data chunks and calculate count so I need await to wait for the promise to return with the count, else I get 0

There are two options to read file using, either using fs.readFileSync or using bytestreams. Bytestreams is preferred in working with large files as normal ReadFileSync involves storing the entire file in a local variable. Performing operations on this can take time and it also uses up lot of memory.
I have used bytestreams to read the file

Since I am using readStreams I need to make the readStream as async and buffer to not cause overhead.

Using readStream, I declare an event listener on the node.js. 
Using .on(data , (chunk) => {}), I create a method to listen to the 'data' event. The chunk refers to the stream of data that is coming from the stream.
Each time a chunk is ready, the callback function is executed. The advantage of these streams is its part of the streams API and hence executes in a non-blocking way


For wordCount, a simple .split(" ") could've worked, but I wanted to use regex to strictly take into account only words with this I get rid of punctuation marks

    //const words = chunk.toString().split(" "); This does not factor in punctuation marks
    //const words = chunk.toString().split(/\s+/);

Ok big issue in program. The file.on and the chunks being promises under the hood and non-blocking means that the program doesnt wait for the chunks to come and returns the count value 0 for every function. Need to handle the aync and await for program to wait for the chunks to appear and then update the count value of the respective function before printing
Wrapped the functions inside a promise and used the await keyword to wait for the chunks to come in the main function

Had to wrap main function also in async and await as the WC function sent a promise pending response to the main function and the main function is waiting for the response to be returned

For the lineCount had to match string to keep track of line breaks in the file, on windows machine the line break is \r\n and on linux it is \n and macOS is \r so I put or condition | to consider all systems
Initially thought of implementing sentence count using . as regex pattern but that is not line count.
Encountered stupid error while using regex, when I used .split(/\r\n | \r | \n/); the space I gave in the pattern was also being considered. To fix this I used split(/\r\n|\r|\n/);

Initially in case all I did this:
    case "all":
      var bytecount = await byteCount(file);
      var linecount = await lineCount(file);
      var wordcount = await wordCount(file);
      var charcount = await characterCount(file);

Clearly did not work lol, I needed to use promise.all to wait for all the promises to get resolved before the res is returned

The main difference between these 2 approaches is that using seperate async and await for each, makes them run one after the other and hence requires more time to complete. Promise.all on the other hand executes them parallely and also takes into account fail fast (if one fails the entire call fails and comes out)
Use promise.all except cases where there is data dependency